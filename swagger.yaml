swagger: "2.0"
info:
  description: "This is a HalykAcademy Bookstore server"
  version: "1.0.0"
  title: "Swagger Bookstore"

host: "bookstore.swagger.io"
basePath: "/v2"

tags:
  - name: "book"
    description: "Everything about your Books"
  - name: "author"
    description: "Everything about your Authors"
  - name: "publisher"
    description: "Everything about your Publishers"

schemes:
  - "https"
  - "http"


paths:
  /books:
    get:
      tags:
        - "book"
      summary: "Get books"
      description: ""
      operationId: "getBooks"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Successfully get books"
          schema:
            type: array
            items:
              $ref: "#/definitions/Book"

  /book:
    post:
      tags:
        - "book"
      summary: "Add a new book"
      description: ""
      operationId: "addBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "405":
          description: "Invalid"


  /book/{bookId}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
    put:
      tags:
        - "book"
      summary: "Updates a book in the store with form data"
      description: ""
      operationId: "updateBookWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of book that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "title"
          in: "formData"
          description: "Updated title of the book"
          required: false
          type: "string"
        - name: "price"
          in: "formData"
          description: "Updated price of the book"
          required: false
          type: "integer"
          format: "int64"
        - name: "authorList"
          in: "formData"
          description: "Updated authorList of the book"
          required: false
          type: "integer"
        - name: "publisher"
          in: "formData"
          description: "Updated publisher of the book"
          required: false
          type: "integer"
        - name: "numberOfPages"
          in: "formData"
          description: "Updated numberOfPages of the book"
          required: false
          type: "integer"
          format: "int64"
        - name: "releaseYear"
          in: "formData"
          description: "Updated releaseYear of the book"
          required: false
          type: "integer"
          format: "int64"
        - name: ""
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
    delete:
      tags:
        - "book"
      summary: "Deletes a book"
      description: ""
      operationId: "deleteBook"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "bookId"
          in: "path"
          description: "Book id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"


  /authors:
    get:
      tags:
        - "author"
      summary: "Get authors"
      description: ""
      operationId: "getAuthors"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Successfully get authors"
          schema:
            type: array
            items:
              $ref: "#/definitions/Author"

  /author:
    post:
      tags:
        - "author"
      summary: "Add a new author"
      description: ""
      operationId: "addAuthor"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "405":
          description: "Invalid"

  /author/{authorId}:
    get:
      tags:
        - "author"
      summary: "Find author by ID"
      description: "Returns an author"
      operationId: "getAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "authorId"
          in: "path"
          description: "ID of author to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "author not found"
    put:
      tags:
        - "author"
      summary: "Updates an author in the store with form data"
      description: ""
      operationId: "updateAuthorWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "authorId"
          in: "path"
          description: "ID of author that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "lastName"
          in: "formData"
          description: "Updated lastname of the author"
          required: true
          type: "string"
        - name: "firstName"
          in: "formData"
          description: "Updated firstName of the author"
          required: true
          type: "string"
        - name: "patronymicName"
          in: "formData"
          description: "Updated patronymicName of the author"
          required: true
          type: "string"
        - name: "dateOfBirth"
          in: "formData"
          description: "Updated dateOfBirth of the author"
          required: true
          type: "string"
        - name: "bookList"
          in: "formData"
          description: "Updated bookList of the book"
          required: false
          type: "integer"

      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
    delete:
      tags:
        - "author"
      summary: "Deletes an author"
      description: ""
      operationId: "deleteAuthor"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "authorId"
          in: "path"
          description: "Author id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"

  /publishers:
    get:
      tags:
        - "publisher"
      summary: "Get publishers"
      description: ""
      operationId: "getPublishers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "Successfully get publishers"
          schema:
            type: array
            items:
              $ref: "#/definitions/Publisher"

  /publisher:
    post:
      tags:
        - "publisher"
      summary: "Add a new publisher"
      description: ""
      operationId: "addPublisher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publisher object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "405":
          description: "Invalid"

  /publisher/{publisherId}:
    get:
      tags:
        - "publisher"
      summary: "Find publisher by ID"
      description: "Returns an publisher"
      operationId: "getPublisherById"
      produces:
        - "application/json"
      parameters:
        - name: "publisherId"
          in: "path"
          description: "ID of publisher to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "publisher not found"
    put:
      tags:
        - "publisher"
      summary: "Updates an publisher in the store with form data"
      description: ""
      operationId: "updatePublisherWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "publisherId"
          in: "path"
          description: "ID of publisher that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the publisher"
          required: true
          type: "string"
        - name: "bookList"
          in: "formData"
          description: "Updated bookList of the publisher"
          required: false
          type: "integer"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
    delete:
      tags:
        - "publisher"
      summary: "Deletes an publisher"
      description: ""
      operationId: "deletePublisher"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "publisherId"
          in: "path"
          description: "Publisher id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "publisher not found"

definitions:
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      price:
        type: "integer"
        format: "int64"
      authorList:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      publisher:
        $ref: "#/definitions/Publisher"
      title:
        type: "string"
      numberOfPages:
        type: "integer"
        format: "int64"
      releaseYear:
        type: "integer"
        format: "int64"


  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      lastName:
        type: "string"
      firstName:
        type: "string"
      patronymicName:
        type: "string"
      dateOfBirth:
        type: "string"
      bookList:
        type: "array"
        items:
          $ref: "#/definitions/Book"

  Publisher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      bookList:
        type: "array"
        items:
          $ref: "#/definitions/Book"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"